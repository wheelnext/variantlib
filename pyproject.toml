[build-system]
requires = ["flit_core >=3.11,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "variantlib"
description = "A library to provide support for variants"
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
authors = [
    { name = "Jonathan Dekhtiar", email = "jonathan@dekhtiar.com" },
    { name = "Michał Górny", email = "mgorny@quansight.com" },
    { name = "Michael Sarahan", email = "msarahan@nvidia.com" },
]
maintainers = [
    { name = "Jonathan Dekhtiar", email = "jonathan@dekhtiar.com" },
    { name = "Michał Górny", email = "mgorny@quansight.com" },
    { name = "Michael Sarahan", email = "msarahan@nvidia.com" },
]
dependencies = [
    "importlib-metadata; python_version < '3.10'",
    "packaging>=25.0,<26.0",
    "platformdirs>=4.3,<5.0",
    "tomli; python_version < '3.11'",
    "typing-extensions; python_version < '3.11'",
]
dynamic = ["version"]

[project.optional-dependencies]
cli = [
    "tomlkit>=0.13,<0.14",
    "tzlocal>=3.0,<6",
    "urwid>=2.6.0,<3",
]
dev = [
    "check-manifest",
    # Pre Commit Hooks
    "pre-commit>=4,<5",
    # Linting
    "ruff>=0.10,<1.0",
]
test = [
    "deepdiff>=8.0,<9.0",
    "hypothesis>=6.0.0,<7",
    "parameterized>=0.9.0,<0.10",
    "pytest>=8.0.0,<9.0.0",
    "pytest-cov>=5.0.0,<6.0.0",
    "pytest-dotenv>=0.5.0,<1.0.0",
    "pytest-env>=1.1.3,<2.0.0",
    "pytest-mock>=3.14.0,<4.0.0",
    "pytest-runner>=6.0.0,<7.0.0",
    "pytest-ordering>=0.6,<1.0.0",
    "virtualenv>=20.0.0,<21.0.0",
    "tomlkit>=0.13,<0.14",
    "uv>=0.7,<0.8",
]

[project.scripts]
variantlib = "variantlib.commands.main:main"

[project.entry-points."variantlib.actions"]
analyze-wheel = "variantlib.commands.analyze_wheel:analyze_wheel"
analyze-platform = "variantlib.commands.analyze_platform:analyze_platform"
config = "variantlib.commands.config.main:main"
generate-index-json = "variantlib.commands.generate_index_json:generate_index_json"
make-variant = "variantlib.commands.make_variant:make_variant"
unmake-variant = "variantlib.commands.unmake_variant:unmake_variant"
plugins = "variantlib.commands.plugins.main:main"

[project.entry-points."variantlib.actions.config"]
list-paths = "variantlib.commands.config.list_paths:list_paths"
setup = "variantlib.commands.config.setup:setup"
show = "variantlib.commands.config.show:show"

[project.entry-points."variantlib.actions.plugins"]
list = "variantlib.commands.plugins.list_plugins:list_plugins"
get-all-configs = "variantlib.commands.plugins.get_all_configs:get_all_configs"
get-supported-configs = "variantlib.commands.plugins.get_supported_configs:get_supported_configs"

[tool.pytest.ini_options]
testpaths = ["tests/"]
addopts = "-vvv --cov=variantlib --cov-report=term-missing"

[tool.mypy]
disallow_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = true

[tool.tox]
requires = ["tox>=4.19"]
env_list = ["3.9", "3.10", "3.11", "3.12", "3.13", "pypy3.9", "pypy3.10", "pypy3.11"]

[tool.tox.env_run_base]
description = "Run tests under {base_python}"
extras = ["test"]
commands = [
    ["pytest"],
]
